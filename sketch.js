// <script src="https://cdn.jsdelivr.net/gh/leizingyiu/utils@master/js/toTitleUpperCase.js"></script> 
if (typeof toTitleUpperCase == 'undefined') {
    toTitleUpperCase = str => str.replace(/\S+/g, (word, idx, sentence) => ['the', 'a', 'an'].indexOf(word) != -1 ? word : word.toLowerCase().replace(/^[a-zA-Z]/, letter => letter.toUpperCase()));
}

// let row = 5, col = 8;
// let margin = 60;
// let spacing = 10;

let pc;
let grid;

function preload() {
}

function setup() {
    createCanvas(windowWidth, windowHeight);

    pc = new PC({
        updateWithCookieBoo: false,
        updateWithUrlBoo: false
    }).title({
        cn: '在此处调整网格参数',
        en: 'Adjust grid parameters here'
    }[language]);
    pc.a('read_readme', '../markdown.html?mdpath=./p5js_Grid/readme.md', { cn: "查看文档", en: "readme.md" }[language]);

    pc.button('save_svg', 'save SVG', () => {
        let pgSvg = createGraphics(width, height, SVG);
        grid.drawOn(pgSvg);
        grid.drawRefLine();
        save(pgSvg, 'Generated by p5js_grid_js.svg');
        grid.drawOn();
    });
    pc.slider('l', 0, 0, width, 1, update);
    pc.slider('t', 0, 0, height, 1, update);
    pc.slider('w', width, 0, width, 1, update);
    pc.slider('h', height, 0, height, 1, update);

    pc.slider('row', 3, 1, 24, 1, update);
    pc.slider('col', 4, 1, 16, 1, update);
    pc.slider('margin', 40, 0, Math.min(width, height) / 2, 1, update);
    pc.slider('spacing', 10, 0, (Math.min(width, height) - margin * 2) / (Math.max(row, col)), 1, update);
    pc.radio('drawFn', ['drawCell', 'drawRefLine'], update);
    pc.hr();

    pc.slider('rect_x', 0, 0, col - 1, 1, update);
    pc.slider('rect_y', 0, 0, row - 1, 1, update);
    pc.slider('rect_w', 1, 1, col, 1, update);
    pc.slider('rect_h', 1, 1, row, 1, update);
    pc.hr();

    pc.slider('text_x', 0, 0, col - 1, 1, update);
    pc.slider('text_y', 0, 0, row - 1, 1, update);
    pc.slider('text_w', 1, 1, col, 1, update);
    pc.slider('text_h', 1, 1, row, 1, update);

    pc.textarea('text_str', `Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
Praesent ultricies ligula sit amet tempor cursus. 
Sed dignissim luctus nisi sed egestas. Vivamus fermentum dignissim ligula, vel auctor ante rutrum et. Sed tempus augue vel ultrices bibendum. 
Vestibulum semper erat id interdum tristique. Ut mollis volutpat felis non consectetur. 
Pellentesque sollicitudin ultrices turpis sed vehicula. Aenean vel iaculis massa. Mauris viverra placerat cursus.
`);

    // let l = 0, t = 0;
    // let cellW = ((w - margin * 2) - (col - 1) * spacing) / col;
    // let cellH = ((h - margin * 2) - (row - 1) * spacing) / row;

    //   console.log(gridObj.get(2)(0));

    // for(let r in gridObj.grid ){
    //   for(let c in gridObj.grid[r]){
    //     console.log(gridObj.grid[r][c]);
    //   }
    // }

    console.log(drawingContext);
    grid = new Grid(l, t, w, h, row, col, margin, spacing);

    pc.update('drawFn', 'drawRefLine');

    setTimeout(() => {
        pc.update('rect_x', col - 1);
        pc.update('rect_y', row - 2);

        pc.update('text_x', col - 2);
        pc.update('text_y', row - 2);
        pc.stick('top');
        update();
    }, 100);

}

function draw() {
    background(0);

    stroke(0, 255, 255);
    strokeWeight(1);
    noFill();

    // grid.drawRefLine();
    // grid.drawCell();
    grid[drawFn]();

    // noLoop();

    typo();
    noLoop();
}




function typo() {
    if (typeof titleFont == 'undefined' || typeof fontOfText == 'undefined') {
        titleFont = loadFont('../font/Xhers Regular.otf', redraw);
        if (typeof getDefaultFont != 'undefined') {
            fontOfText = getDefaultFont();
        } else {
            fontOfText = loadFont('../font/NimbusSanL-Reg.otf');
        }
        redraw();
        return;
    }

    push();

    if (typeof toTitleUpperCase == 'undefined') { toTitleUpperCase = function (str) { return str } }
    if (typeof globalMargin != 'number') { globalMargin = 48; }

    const padding = grid.spacing, frameColor = 'rgba(255,255,255,0.8)';
    const titleSizeK = 4, textSizeK = 0.8;
    let titleText = 'Grid.js';
    let discriptText = 'a js tool for creating grid\ndesign and coding by leizingyiu';
    discriptText = toTitleUpperCase(discriptText);

    let rightBottomSpot = grid.grid[grid.row - 1][grid.col - 1],
        rightTopSpot = grid.grid[0][grid.col - 1],
        leftTopSpot = grid.grid[0][0],
        leftBottomSpot = grid.grid[grid.row - 1][0];

    // let objShow = obj => ['l', 't', 'x', 'y', 'w', 'h'].map(i => i + ':' + obj[i]).join(',\n');
    // console.log('rightBottomSpot:\n' + objShow(rightBottomSpot), '\n\nrightTopSpot: \n' + objShow(rightTopSpot));

    textSize(Math.min(width, height) / 20);

    fill(frameColor);
    noStroke();
    textSize(Math.min(width, height) / 48);

    // left top
    push();
    textAlign(LEFT, TOP);
    textFont(fontOfText);
    textSize(textSize() * textSizeK * 0.8);
    textLeading(textSize() + spacing);
    textWrap(WORD);
    //     text(`new Grid({l:${l},t:${t},w:${w},h:${h},row:${row},col:${col},margin:${margin},spacing:${spacing},drawing:window});

    // ----------(  ${{ cn: '所有小数最多只保留两位', en: 'All decimals are limited to two digits at most' }[language].replace(/(.)/g, '$1 ')} )

    // ▸ Grid ${objToString(new Grid({ l: l, t: t, w: w, h: h, row: row, col: col, margin: margin, spacing: spacing, drawing: window }))
    //             .replace(/\n/g, '')
    //             .replace(/,\s*([^\{,]+\{)/g, ',\n$1')
    //             .replace(/\}\s*,/g, '},\n')
    //         }`
    //         .replace(/([^a-zA-Z0-9\s\'\"\.])([a-zA-Z0-9])/g, '$1 $2')
    //         .replace(/([a-zA-Z0-9])([^a-zA-Z0-9\s\'\"\.])/g, '$1 $2')
    //         .replace(/(\S)\s*:\s*(\S)/g, '$1 : $2')
    //         .replace(/([^\}])\},\n\n/g, '$1},\n' + (new Array(Math.ceil(textWidth('"grid" : {') / textWidth(' '))).join(' '))),
    //         ...grid.cellArgs( 0, 0, grid.col - 2, grid.row,CORNER));

    {
        let X = rect_x, Y = rect_y, W = rect_w, H = rect_h;
        let demoStr = `${{ cn: '首先通过位置、尺寸、内部间距，新建一个网格', en: 'First, create a new grid by position, size, and internal spacing' }[language]}
> grid = new Grid({l:${l},t:${t},w:${w},h:${h},row:${row},col:${col},margin:${margin},spacing:${spacing},drawing:window});

---------- [  ${{ cn: '得到如下网格对象（所有小数最多只保留两位', en: 'Get the following mesh object ( All decimals are limited to two digits at most' }[language].replace(/(.)/g, '$1 ')} ] ----------

▸ Grid ${objToString(grid)
                .replace(/\n/g, '')
                .replace(/,\s*([^\{,]+\{)/g, ',\n$1')
                .replace(/\}\s*,/g, '},\n')
            }`
            .replace(/([^a-zA-Z0-9\s\'\"\.])([a-zA-Z0-9])/g, '$1 $2')
            .replace(/([a-zA-Z0-9])([^a-zA-Z0-9\s\'\"\.])/g, '$1 $2')
            .replace(/(\S)\s*:\s*(\S)/g, '$1 : $2')
            .replace(/([^\}])\},\n\n/g, '$1},\n' + (new Array(Math.ceil(textWidth('"grid" : {') / textWidth(' '))).join(' '))) +
            `

${{
                en: 'You can get the position and size  ( [x, y, w, h] )  on the grid by:',
                cn: '您可以通过以下方式获取网格上的位置和大小 ( [x, y, w, h] ) ：'
            }[language]}
> let ${['rect_x', 'rect_y', 'rect_w', 'rect_h'].map(i => i + ' = ' + eval(i)).join(', ')};
${['', 'CORNER', 'CORNERS', 'CENTER', 'RADIUS'].map(i => i == '' ? '' :
                `grid.cellArgs(rowIdx=rect_x, colIdx=rect_y, cols = rect_w, rows = rect_h, mode = ${i} );      // [ ${[...grid.cellArgs(rect_x, rect_y, rect_w, rect_h, window[i])]
                    .map(j => j.toFixed(2).replace(/\.00/g, '  ').replace(/0$/g, ' ')).join(',  ')} ]`
            ).join('\n> ')
                .split(/\s*\n\s*/).map((sentence, idx, sentenceArr) => sentence.replace(/\s*\/\//g, function () {
                    let beforeStr = (arguments[2].slice(0, arguments[1]));
                    let longestStr = sentenceArr.map(s => s.replace(RegExp(arguments[0] + '.*', 'g'), '')).sort((a, b) => b.length - a.length)[0];
                    // console.log(beforeStr, '\n', longestStr);
                    let n = Math.floor((textWidth(longestStr) - textWidth(beforeStr)) / textWidth(' ')) + 5;
                    return [...new Array(n)].join(' ') + '//'
                })).join('\n')} ` +
            `

${{
                en: 'and rect() or text() on the grid:',
                cn: '并且在网格上绘制文本以及矩形 ( text() 、 rect() ) ：'
            }[language]}
> grid.rect( rowIdx = rect_x, colIdx = rect_y,  cols = rect_w, rows = rect_h );
> grid.text( text_str, rowIdx = text_x, colIdx = text_y, cols = text_w,   rows = text_h );
`;
        grid.text(demoStr,
            0, 0,
            grid.col > 5 ? grid.col - 1 : grid.col, grid.row);

        // console.log(demoStr);
    }
    pop();

    push();
    textSize(textSize() * 2);
    fill(255, 100);
    grid.rect(
        rowIdx = rect_x, colIdx = rect_y, cols = rect_w, rows = rect_h);
    grid.text(text_str,
        rowIdx = text_x, colIdx = text_y, cols = text_w, rows = text_h);
    pop();

    // right top
    push();
    textAlign(RIGHT, TOP);
    textFont(titleFont);
    textSize(textSize() * titleSizeK);
    textLeading(textSize());
    // text(titleText,
    //     rightTopSpot.x + rightTopSpot.w,
    //     rightTopSpot.y);
    grid.text(titleText,
        0, 0, grid.col, grid.row);
    pop();

    //right bottom
    push();

    textFont(fontOfText);
    textSize(textSize() * textSizeK);
    textLeading(spacing + textSize());
    textAlign(RIGHT, BOTTOM);
    // text(discriptText,
    //     rightBottomSpot.x + rightBottomSpot.w,
    //     rightBottomSpot.y + rightBottomSpot.h - padding);
    translate(0, -padding);
    grid.text(discriptText,
        0, 0, grid.col, grid.row);
    pop();

    strokeWeight(2);

    stroke(frameColor);

    //right top
    push();
    textFont(titleFont);
    textSize(textSize() * titleSizeK);
    line(rightTopSpot.x + rightTopSpot.w,
        rightTopSpot.y,
        rightTopSpot.x + rightTopSpot.w - textWidth(titleText),
        rightTopSpot.y);
    pop();

    //right bottom
    push();
    strokeWeight(1);
    textFont(fontOfText);
    textSize(textSize() * textSizeK);

    line(rightBottomSpot.x + rightBottomSpot.w,
        rightBottomSpot.y + rightBottomSpot.h,
        rightBottomSpot.x + rightBottomSpot.w - Math.max(...discriptText.split('\n').map(i => textWidth(i))),
        rightBottomSpot.y + rightBottomSpot.h);
    pop();

    pop();
}

function windowResized() {
    resizeCanvas(windowWidth, windowHeight);
    l = 0, t = 0, w = width, h = height;
    update();
    redraw();
}
function updateGrid() {
    // console.log(l, t, w, h, row, col, margin, spacing);
    grid.init(l, t, w, h, row, col, margin, spacing);
};

function updatePC() {
    pc.range('l', 0, width);
    pc.range('t', 0, height);
    pc.range('w', 0, width);
    pc.range('h', 0, height);

    pc.range('rect_x', 0, col - 1);
    pc.range('rect_y', 0, row - 1);
    pc.range('rect_w', 1, col - rect_x);
    pc.range('rect_h', 1, row - rect_y);

    pc.range('text_x', 0, col - 1);
    pc.range('text_y', 0, row - 1);
    pc.range('text_w', 1, col - text_x);
    pc.range('text_h', 1, row - text_y);

    pc.range('margin', 0, Math.min(width, height) / 2);
    pc.range('spacing', 0, Math.min((width - margin * 2) / col, (height - margin * 2) / row));
}

function update() {
    updatePC();
    updateGrid();
    redraw();
}




// function backup() {
//     let objToString = (obj, tofixed = 2) => {
//         let str = '';
//         Object.keys(obj).map(k => {
//             let strk = '';
//             if (obj[k] instanceof Object) {
//                 if (Object.keys(obj[k]).some(key =>
//                     Object.keys(obj[k]).join() == Object.keys(obj[k][key]).join() &&
//                     Object.keys(obj[k][key]).join() == Object.keys(obj[k][key][key]).join()
//                 )) {
//                     strk = '"error: Contains circular references"';
//                 } else {
//                     strk = objToString(obj[k]);
//                 }
//             } else {
//                 strk = obj[k];
//                 strk = typeof strk == 'number' && window.isNaN(strk) == false ?
//                     (String(strk).indexOf('.') != -1 && String(strk).split('.')[1].length > 2 ? strk.toFixed(tofixed) : strk) :
//                     `"${strk}"`;
//             }
//             str += '"' + k + '"' + ':' + strk + ', \n';
//         });
//         return `{${str.replace(/\n,\n/g, '\n').replace(/,\n}/g, '\n}').replace(/,[\s]*$/g, '')}}`;
//     }
//     let g = new Grid({ l: 0, t: 0, w: width, h: height, row: 2, col: 2 });
//     let G = objToString(g);
//     console.log(JSON.stringify(JSON.parse(G), ' ', 2));
// }